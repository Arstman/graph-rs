use crate::auth::{OAuth, OAuthCredential};
use crate::identity::form_credential::FormCredential;
use crate::identity::{Authority, AzureAuthorityHost, ResponseMode};
use crate::oauth::{Prompt, ResponseType};
use graph_error::{AuthorizationFailure, AuthorizationResult};
use url::form_urlencoded::Serializer;
use url::Url;
/// The defining characteristic of the implicit grant is that tokens (ID tokens or access tokens)
/// are returned directly from the /authorize endpoint instead of the /token endpoint. This is
/// often used as part of the authorization code flow, in what is called the "hybrid flow" -
/// retrieving the ID token on the /authorize request along with an authorization code.
/// https://learn.microsoft.com/en-us/azure/active-directory/develop/v2-oauth2-implicit-grant-flow
#[derive(Clone)]
pub struct ImplicitCredentialAuthorizationUrl {
    /// Required.
    /// The Application (client) ID that the Azure portal - App registrations page assigned
    /// to your app
    pub(crate) client_id: String,
    /// Required
    /// If not set, defaults to code
    /// Must include id_token for OpenID Connect sign-in. It may also include the response_type
    /// token. Using token here will allow your app to receive an access token immediately from
    /// the authorize endpoint without having to make a second request to the authorize endpoint.
    /// If you use the token response_type, the scope parameter must contain a scope indicating
    /// which resource to issue the token for (for example, user.read on Microsoft Graph). It can
    /// also contain code in place of token to provide an authorization code, for use in the
    /// authorization code flow. This id_token+code response is sometimes called the hybrid flow.
    pub(crate) response_type: Vec<ResponseType>,
    /// Optional
    /// The redirect_uri of your app, where authentication responses can be sent and received
    /// by your app. It must exactly match one of the redirect_uris you registered in the portal,
    /// except it must be URL-encoded.
    pub(crate) redirect_uri: Option<String>,
    /// Required
    /// A space-separated list of scopes. For OpenID Connect (id_tokens), it must include the
    /// scope openid, which translates to the "Sign you in" permission in the consent UI.
    /// Optionally you may also want to include the email and profile scopes for gaining access
    /// to additional user data. You may also include other scopes in this request for requesting
    /// consent to various resources, if an access token is requested.
    pub(crate) scope: Vec<String>,
    /// Optional
    /// Specifies the method that should be used to send the resulting token back to your app.
    /// Defaults to query for just an access token, but fragment if the request includes an id_token.
    pub(crate) response_mode: ResponseMode,
    /// Optional
    /// A value included in the request that will also be returned in the token response.
    /// It can be a string of any content that you wish. A randomly generated unique value is
    /// typically used for preventing cross-site request forgery attacks. The state is also used
    /// to encode information about the user's state in the app before the authentication request
    /// occurred, such as the page or view they were on.
    pub(crate) state: Option<String>,
    /// Required
    ///  A value included in the request, generated by the app, that will be included in the
    /// resulting id_token as a claim. The app can then verify this value to mitigate token replay
    /// attacks. The value is typically a randomized, unique string that can be used to identify
    /// the origin of the request. Only required when an id_token is requested.
    pub(crate) nonce: String,
    /// Optional
    /// Indicates the type of user interaction that is required. The only valid values at this
    /// time are 'login', 'none', 'select_account', and 'consent'. prompt=login will force the
    /// user to enter their credentials on that request, negating single-sign on. prompt=none is
    /// the opposite - it will ensure that the user isn't presented with any interactive prompt
    /// whatsoever. If the request can't be completed silently via single-sign on, the Microsoft
    /// identity platform will return an error. prompt=select_account sends the user to an account
    /// picker where all of the accounts remembered in the session will appear. prompt=consent
    /// will trigger the OAuth consent dialog after the user signs in, asking the user to grant
    /// permissions to the app.
    pub(crate) prompt: Option<Prompt>,
    /// Optional
    /// You can use this parameter to pre-fill the username and email address field of the sign-in
    /// page for the user, if you know the username ahead of time. Often, apps use this parameter
    /// during re-authentication, after already extracting the login_hint optional claim from an
    /// earlier sign-in.
    pub(crate) login_hint: Option<String>,
    /// Optional
    /// If included, it will skip the email-based discovery process that user goes through on
    /// the sign-in page, leading to a slightly more streamlined user experience. This parameter
    /// is commonly used for Line of Business apps that operate in a single tenant, where they'll
    /// provide a domain name within a given tenant, forwarding the user to the federation provider
    /// for that tenant. This hint prevents guests from signing into this application, and limits
    /// the use of cloud credentials like FIDO.
    pub(crate) domain_hint: Option<String>,
    /// The Azure Active Directory tenant (directory) Id of the service principal.
    pub(crate) authority: Authority,
}

impl ImplicitCredentialAuthorizationUrl {
    pub fn new<T: AsRef<str>, U: ToString, I: IntoIterator<Item = U>>(
        client_id: T,
        nonce: T,
        scope: I,
    ) -> ImplicitCredentialAuthorizationUrl {
        ImplicitCredentialAuthorizationUrl {
            client_id: client_id.as_ref().to_owned(),
            response_type: vec![ResponseType::Code],
            redirect_uri: None,
            scope: scope.into_iter().map(|s| s.to_string()).collect(),
            response_mode: ResponseMode::Query,
            state: None,
            nonce: nonce.as_ref().to_owned(),
            prompt: None,
            login_hint: None,
            domain_hint: None,
            authority: Default::default(),
        }
    }

    pub fn builder() -> ImplicitCredentialAuthorizationUrlBuilder {
        ImplicitCredentialAuthorizationUrlBuilder::new()
    }

    pub fn url(&self) -> AuthorizationResult<Url> {
        self.url_with_host(&AzureAuthorityHost::default())
    }

    pub fn url_with_host(
        &self,
        azure_authority_host: &AzureAuthorityHost,
    ) -> AuthorizationResult<Url> {
        let mut serializer = OAuth::new();

        if self.client_id.trim().is_empty() {
            return AuthorizationFailure::required_value("client_id");
        }

        if self.nonce.trim().is_empty() {
            return AuthorizationFailure::required_value("nonce");
        }

        serializer
            .client_id(self.client_id.as_str())
            .nonce(self.nonce.as_str())
            .extend_scopes(self.scope.clone())
            .authority(azure_authority_host, &self.authority);

        let response_types: Vec<String> =
            self.response_type.iter().map(|rt| rt.to_string()).collect();

        let mut response_type = response_types.join(" ");

        if response_type.trim().is_empty() {
            serializer.response_type("code");
            response_type = "code".to_owned();
        } else {
            serializer.response_type(response_type.as_str());
        }

        if response_type.contains("id_token") {
            serializer.response_mode(ResponseMode::Fragment.as_ref());
        } else {
            serializer.response_mode(self.response_mode.as_ref());
        }

        if self.scope.is_empty() {
            if response_type.contains("id_token") {
                serializer.add_scope("openid");
            } else {
                return AuthorizationFailure::required_value("scope");
            }
        }

        if let Some(state) = self.state.as_ref() {
            serializer.state(state.as_str());
        }

        if let Some(prompt) = self.prompt.as_ref() {
            serializer.prompt(prompt.as_ref());
        }

        if let Some(domain_hint) = self.domain_hint.as_ref() {
            serializer.domain_hint(domain_hint.as_str());
        }

        if let Some(login_hint) = self.login_hint.as_ref() {
            serializer.login_hint(login_hint.as_str());
        }

        let authorization_credentials = vec![
            FormCredential::Required(OAuthCredential::ClientId),
            FormCredential::Required(OAuthCredential::ResponseType),
            FormCredential::Required(OAuthCredential::Scope),
            FormCredential::Required(OAuthCredential::Nonce),
            FormCredential::NotRequired(OAuthCredential::RedirectUri),
            FormCredential::NotRequired(OAuthCredential::ResponseMode),
            FormCredential::NotRequired(OAuthCredential::State),
            FormCredential::NotRequired(OAuthCredential::Prompt),
            FormCredential::NotRequired(OAuthCredential::LoginHint),
            FormCredential::NotRequired(OAuthCredential::DomainHint),
        ];

        let mut encoder = Serializer::new(String::new());
        serializer.url_query_encode(authorization_credentials, &mut encoder)?;

        if let Some(authorization_url) = serializer.get(OAuthCredential::AuthorizationUrl) {
            let mut url = Url::parse(authorization_url.as_str())?;
            url.set_query(Some(encoder.finish().as_str()));
            Ok(url)
        } else {
            AuthorizationFailure::required_value_msg("authorization_url", Some("Internal Error"))
        }
    }
}

#[derive(Clone)]
pub struct ImplicitCredentialAuthorizationUrlBuilder {
    implicit_credential_authorization_url: ImplicitCredentialAuthorizationUrl,
}

impl Default for ImplicitCredentialAuthorizationUrlBuilder {
    fn default() -> Self {
        Self::new()
    }
}

impl ImplicitCredentialAuthorizationUrlBuilder {
    pub fn new() -> ImplicitCredentialAuthorizationUrlBuilder {
        ImplicitCredentialAuthorizationUrlBuilder {
            implicit_credential_authorization_url: ImplicitCredentialAuthorizationUrl {
                client_id: String::new(),
                response_type: vec![ResponseType::Code],
                redirect_uri: None,
                scope: vec![],
                response_mode: ResponseMode::Query,
                state: None,
                nonce: String::new(),
                prompt: None,
                login_hint: None,
                domain_hint: None,
                authority: Default::default(),
            },
        }
    }

    pub fn with_client_id<T: AsRef<str>>(&mut self, client_id: T) -> &mut Self {
        self.implicit_credential_authorization_url.client_id = client_id.as_ref().to_owned();
        self
    }

    pub fn with_redirect_uri<T: AsRef<str>>(&mut self, redirect_uri: T) -> &mut Self {
        self.implicit_credential_authorization_url.redirect_uri =
            Some(redirect_uri.as_ref().to_owned());
        self
    }

    /// Convenience method. Same as calling [with_authority(Authority::TenantId("tenant_id"))]
    pub fn with_tenant<T: AsRef<str>>(&mut self, tenant: T) -> &mut Self {
        self.implicit_credential_authorization_url.authority =
            Authority::TenantId(tenant.as_ref().to_owned());
        self
    }

    pub fn with_authority<T: Into<Authority>>(&mut self, authority: T) -> &mut Self {
        self.implicit_credential_authorization_url.authority = authority.into();
        self
    }

    /// Default is code. Must include code for the authorization code flow.
    /// Can also include id_token or token if using the hybrid flow.
    pub fn with_response_type<I: IntoIterator<Item = ResponseType>>(
        &mut self,
        response_type: I,
    ) -> &mut Self {
        self.implicit_credential_authorization_url.response_type =
            response_type.into_iter().collect();
        self
    }

    /// Specifies how the identity platform should return the requested token to your app.
    ///
    /// Supported values:
    ///
    /// - **query**: Default when requesting an access token. Provides the code as a query string
    ///     parameter on your redirect URI. The query parameter is not supported when requesting an
    ///     ID token by using the implicit flow.
    /// - **fragment**: Default when requesting an ID token by using the implicit flow.
    ///     Also supported if requesting only a code.
    /// - **form_post**: Executes a POST containing the code to your redirect URI.
    ///     Supported when requesting a code.
    pub fn with_response_mode(&mut self, response_mode: ResponseMode) -> &mut Self {
        self.implicit_credential_authorization_url.response_mode = response_mode;
        self
    }

    /// A value included in the request, generated by the app, that is included in the
    /// resulting id_token as a claim. The app can then verify this value to mitigate token
    /// replay attacks. The value is typically a randomized, unique string that can be used
    /// to identify the origin of the request.
    pub fn with_nonce<T: AsRef<str>>(&mut self, nonce: T) -> &mut Self {
        self.implicit_credential_authorization_url.nonce = nonce.as_ref().to_owned();
        self
    }

    pub fn with_state<T: AsRef<str>>(&mut self, state: T) -> &mut Self {
        self.implicit_credential_authorization_url.state = Some(state.as_ref().to_owned());
        self
    }

    pub fn with_scope<T: ToString, I: IntoIterator<Item = T>>(&mut self, scope: I) -> &mut Self {
        self.implicit_credential_authorization_url.scope =
            scope.into_iter().map(|s| s.to_string()).collect();
        self
    }

    /// Indicates the type of user interaction that is required. Valid values are login, none,
    /// consent, and select_account.
    ///
    /// - **prompt=login** forces the user to enter their credentials on that request, negating single-sign on.
    /// - **prompt=none** is the opposite. It ensures that the user isn't presented with any interactive prompt.
    ///     If the request can't be completed silently by using single-sign on, the Microsoft identity platform returns an interaction_required error.
    /// - **prompt=consent** triggers the OAuth consent dialog after the user signs in, asking the user to
    ///     grant permissions to the app.
    /// - **prompt=select_account** interrupts single sign-on providing account selection experience
    ///     listing all the accounts either in session or any remembered account or an option to choose to use a different account altogether.
    pub fn with_prompt(&mut self, prompt: Prompt) -> &mut Self {
        self.implicit_credential_authorization_url.prompt = Some(prompt);
        self
    }

    pub fn with_domain_hint<T: AsRef<str>>(&mut self, domain_hint: T) -> &mut Self {
        self.implicit_credential_authorization_url.domain_hint =
            Some(domain_hint.as_ref().to_owned());
        self
    }

    pub fn with_login_hint<T: AsRef<str>>(&mut self, login_hint: T) -> &mut Self {
        self.implicit_credential_authorization_url.login_hint =
            Some(login_hint.as_ref().to_owned());
        self
    }

    pub fn build(&self) -> ImplicitCredentialAuthorizationUrl {
        self.implicit_credential_authorization_url.clone()
    }
}

#[cfg(test)]
mod test {
    use super::*;

    #[test]
    fn serialize_uri() {
        let authorizer = ImplicitCredentialAuthorizationUrl::builder()
            .with_client_id("6731de76-14a6-49ae-97bc-6eba6914391e")
            .with_response_type(vec![ResponseType::Token])
            .with_redirect_uri("https::/localhost:8080/myapp")
            .with_scope(["User.Read"])
            .with_response_mode(ResponseMode::Fragment)
            .with_state("12345")
            .with_nonce("678910")
            .with_prompt(Prompt::None)
            .with_login_hint("myuser@mycompany.com")
            .build();

        let url_result = authorizer.url();
        assert!(url_result.is_ok());
    }

    #[test]
    fn set_open_id_fragment() {
        let authorizer = ImplicitCredentialAuthorizationUrl::builder()
            .with_client_id("6731de76-14a6-49ae-97bc-6eba6914391e")
            .with_response_type(vec![ResponseType::IdToken])
            .with_redirect_uri("https::/localhost:8080/myapp")
            .with_scope(["User.Read"])
            .with_nonce("678910")
            .build();

        let url_result = authorizer.url();
        assert!(url_result.is_ok());
        let url = url_result.unwrap();
        let url_str = url.as_str();
        assert!(url_str.contains("response_mode=fragment"))
    }

    #[test]
    fn response_type_join() {
        let authorizer = ImplicitCredentialAuthorizationUrl::builder()
            .with_client_id("6731de76-14a6-49ae-97bc-6eba6914391e")
            .with_response_type(vec![ResponseType::IdToken, ResponseType::Token])
            .with_redirect_uri("https::/localhost:8080/myapp")
            .with_scope(["User.Read"])
            .with_nonce("678910")
            .build();

        let url_result = authorizer.url();
        assert!(url_result.is_ok());
        let url = url_result.unwrap();
        let url_str = url.as_str();
        assert!(url_str.contains("response_type=id_token+token"))
    }

    #[test]
    fn response_type_join_string() {
        let authorizer = ImplicitCredentialAuthorizationUrl::builder()
            .with_client_id("6731de76-14a6-49ae-97bc-6eba6914391e")
            .with_response_type(ResponseType::FromString(vec![
                "id_token".to_owned(),
                "token".to_owned(),
            ]))
            .with_redirect_uri("https::/localhost:8080/myapp")
            .with_scope(["User.Read"])
            .with_nonce("678910")
            .build();

        let url_result = authorizer.url();
        assert!(url_result.is_ok());
        let url = url_result.unwrap();
        let url_str = url.as_str();
        assert!(url_str.contains("response_type=id_token+token"))
    }

    #[test]
    fn response_type_into_iter() {
        let authorizer = ImplicitCredentialAuthorizationUrl::builder()
            .with_client_id("6731de76-14a6-49ae-97bc-6eba6914391e")
            .with_response_type(ResponseType::IdToken)
            .with_redirect_uri("https::/localhost:8080/myapp")
            .with_scope(["User.Read"])
            .with_nonce("678910")
            .build();

        let url_result = authorizer.url();
        assert!(url_result.is_ok());
        let url = url_result.unwrap();
        let url_str = url.as_str();
        assert!(url_str.contains("response_type=id_token"))
    }

    #[test]
    fn response_type_into_iter2() {
        let authorizer = ImplicitCredentialAuthorizationUrl::builder()
            .with_client_id("6731de76-14a6-49ae-97bc-6eba6914391e")
            .with_response_type(vec![ResponseType::IdToken, ResponseType::Token])
            .with_redirect_uri("https::/localhost:8080/myapp")
            .with_scope(["User.Read"])
            .with_nonce("678910")
            .build();

        let url_result = authorizer.url();
        assert!(url_result.is_ok());
        let url = url_result.unwrap();
        let url_str = url.as_str();
        assert!(url_str.contains("response_type=id_token+token"))
    }
}
